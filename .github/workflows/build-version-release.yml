name: Build, Version and Release

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:

permissions:
  contents: write

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        shell: bash

      - name: Run tests
        run: npm test --if-present
        shell: bash

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
        shell: bash

      - name: Bump version
        id: bump
        run: |
          npm version patch -m "chore(release): %s [skip ci]"
          echo new_version=$(node -p "require('./package.json').version") >> $GITHUB_OUTPUT
        shell: bash

      - name: Show bumped version
        run: |
          echo "step-level bump.outputs.new_version = ${{ steps.bump.outputs.new_version }}"
        shell: bash
        
      - name: Push commit and tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git" --follow-tags
        shell: bash

  build:
    needs: version
    strategy:
      matrix:
        include:
          - os: windows-latest
            script: win
            ext: exe
          - os: macos-latest
            script: mac
            ext: dmg
          - os: ubuntu-latest
            script: linux
            ext: AppImage
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code at new tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: v${{ needs.version.outputs.new_version }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        shell: bash

      - name: Run tests
        run: npm test --if-present
        shell: bash

      - name: Package portable build
        run: npm run package:${{ matrix.script }}
        shell: bash

      - name: Build installer
        run: npm run dist:${{ matrix.script }}
        shell: bash

      - name: Compress build (macOS/Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          v=${{ needs.version.outputs.new_version }}
          if [ "$(uname)" = "Linux" ]; then
            src="dist/linux-unpacked"
          else
            src="dist/mac-arm64"
          fi
          echo "== Compressing portable build =="
          echo "Version: $v"
          echo "Source directory: $src"
          echo "Listing contents of $src:"
          ls -R "$src"
          echo
          echo "Starting compression..."
          7z a -bb3 -bsp1 -bse1 "soulbound-$v-x64.${{ matrix.script }}.7z" "$src/*" -r
          echo "Compression exit code: $?"
      - name: Compress build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $v = '${{ needs.version.outputs.new_version }}'
          $src = "dist\win-unpacked"
          Write-Host "== Compressing portable build =="
          Write-Host ("Version: {0}" -f $v)
          Write-Host ("Source directory: {0}" -f $src)
          Write-Host ("Contents of {0}:" -f $src)
          Get-ChildItem $src -Recurse | ForEach-Object { Write-Host " - $($_.FullName)" }
          Write-Host
          Write-Host "Running 7z with verbose flags..."
          & 7z a -bb3 -bsp1 -bse1 "soulbound-$v-x64.${{ matrix.script }}.7z" "$src\*" 2>&1 |
            ForEach-Object { Write-Host $_ }
          Write-Host ("`nCompression exit code: {0}" -f $LASTEXITCODE)

      - name: List entire workspace (macOS/Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "=== WORKSPACE ROOT ==="
          ls -R .
          echo "=== dist directory ==="
          ls -lah dist
      - name: List entire workspace (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "=== WORKSPACE ROOT ==="
          Get-ChildItem -Recurse
          Write-Host "=== dist directory ==="
          Get-ChildItem dist -Recurse

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.os }}
          path: |
            soulbound-${{ needs.version.outputs.new_version }}-x64.*.7z
            # Windows installer and manifest
            dist/**/Soulbound-Setup-*.exe
            dist/**/soulbound-*-x64.nsis.7z
            dist/**/latest.yml
            # macOS
            dist/**/*.dmg
            # Linux
            dist/**/*.AppImage

  release:
    needs: [version, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List all downloaded artifacts
        run: ls -R artifacts
        shell: bash

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ env.GH_TOKEN }}
          tag: v${{ needs.version.outputs.new_version }}
          name: "Soulbound v${{ needs.version.outputs.new_version }}"
          artifacts: |
            artifacts/release-windows-latest/dist/**/soulbound-*-x64.nsis.7z,
            artifacts/release-windows-latest/dist/**/latest.yml,
            artifacts/**/dist/soulbound-*-x64.*.7z,
            artifacts/release-windows-latest/dist/**/Soulbound-Setup-*.exe,
            artifacts/release-macos-latest/dist/**/*.dmg,
            artifacts/release-ubuntu-latest/dist/**/*.AppImage
          draft: false
          prerelease: false
          generateReleaseNotes: true