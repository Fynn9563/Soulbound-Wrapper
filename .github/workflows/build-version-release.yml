name: Build, Version and Release

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:

permissions:
  contents: write

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        shell: bash

      - name: Run tests
        run: npm test --if-present
        shell: bash

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
        shell: bash

      - name: Bump version
        id: bump
        run: |
          npm version patch -m "chore(release): %s [skip ci]"
          echo new_version=$(node -p "require('./package.json').version") >> $GITHUB_OUTPUT
        shell: bash

      - name: Show bumped version
        run: |
          echo "step-level bump.outputs.new_version = ${{ steps.bump.outputs.new_version }}"
        shell: bash
        
      - name: Push commit and tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git" --follow-tags
        shell: bash

  build:
    needs: version
    strategy:
      matrix:
        include:
          - os: windows-latest
            script: win
            ext: exe
          - os: macos-latest
            script: mac
            ext: dmg
          - os: ubuntu-latest
            script: linux
            ext: AppImage
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code at new tag
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: v${{ needs.version.outputs.new_version }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci
        shell: bash

      - name: Run tests
        run: npm test --if-present
        shell: bash

      - name: Package portable build
        run: npm run package:${{ matrix.script }}
        shell: bash

      - name: Compress portable build (macOS/Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          v=${{ needs.version.outputs.new_version }}
          # Electron Builder outputs a linux AppImage but also leaves an unpacked dir
          # For Linux: dist/linux-unpacked
          # For macOS: dist/mac (this contains Soulbound.app)
          if [ "${RUNNER_OS}" = "Linux" ]; then
            src="dist/linux-unpacked"
          else
            src="dist/mac"
          fi
          echo "Compressing $src -> soulbound-$v-x64.${{ matrix.script }}.7z"
          7z a "soulbound-$v-x64.${{ matrix.script }}.7z" "$src/*" -r

      - name: Compress portable build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $v = '${{ needs.version.outputs.new_version }}'
          # Electron Builder leaves an unpacked app in dist/win-unpacked
          $src = "dist\\win-unpacked"
          Write-Host "Compressing $src -> soulbound-$v-x64.${{ matrix.script }}.7z"
          & 7z a "soulbound-$v-x64.${{ matrix.script }}.7z" "$src\\*" -r

      - name: Build installer
        run: npm run dist:${{ matrix.script }}
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.script }}
          path: |
            soulbound-${{ needs.version.outputs.new_version }}-x64.*.7z
            dist/**/Soulbound-Setup-*.exe
            dist/**/*.dmg
            dist/**/*.AppImage
            dist/nsis-web/latest.yml
            dist/latest*.yml

  release:
    needs: [version, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ env.GH_TOKEN }}
          tag: v${{ needs.version.outputs.new_version }}
          name: "Soulbound v${{ needs.version.outputs.new_version }}"
          artifacts: |
            artifacts/soulbound-*-x64.*.7z,
            artifacts/**/dist/**/Soulbound-Setup-*.exe,
            artifacts/**/dist/**/*.dmg,
            artifacts/**/dist/**/*.AppImage,
            artifacts/**/dist/nsis-web/latest.yml,
            artifacts/**/dist/latest*.yml
          draft: false
          prerelease: false
          generateReleaseNotes: true